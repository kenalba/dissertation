:: StoryTitle
Dissertation


:: StoryData
{
	"ifid": "AD0660F8-FF49-46A8-B178-0AF39F853F11",
	"format": "SugarCube",
	"format-version": "2.31.1",
	"start": "Title Page",
	"zoom": 1
}

:: Story Stylesheet [stylesheet]

:: Story JavaScript [script]
postrender["Associate Special Passages"] = function (content, taskName) {
	setPageElement("story-title", "StoryTitle", Story.title);
	setPageElement("story-banner","StoryBanner");
	setPageElement("story-subtitle","StorySubtitle");
	setPageElement("story-author","StoryAuthor");
	setPageElement("story-caption","StoryCaption");
}

/*
	<<scrolldown [duration]>>

	duration : (optional) The length of time to animate the scroll, as the
	           strings 'fast' or 'slow' or a valid CSS time value (e.g. 5s
	           and 500ms).  The default duration is 'slow'.
*/
Macro.add('scrolldown', {
	handler : function () {
		var target   = document.scrollingElement || 'html,body';
		var duration;

		if (this.args.length > 0) {
			switch (this.args[0]) {
			case 'fast':
			case 'slow':
				duration = this.args[0];
				break;
			default:
				try {
					duration = Math.max(Engine.minDomActionDelay, Util.fromCssTime(this.args[0]));
				}
				catch (ex) {
					return this.error(ex.message);
				}
				break;
			}
		}
		else {
			duration = 'slow';
		}

		setTimeout(function () {
			$(target).animate({
				scrollTop: $(document).height() - $(window).height()
			}, duration);
		}, Engine.minDomActionDelay);
	}
});

function startCamera() {
    const videoElement = document.getElementById('cameraVideo');
    console.log("Butt!")
    if (!videoElement) {
        console.error("Video element not found.");
        alert("Video element not found.");
        return;
    }

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(function(stream) {
                videoElement.srcObject = stream;
                videoElement.play();
            })
            .catch(function(error) {
                console.error("Error accessing the camera: ", error);
                alert("Unable to access the camera. Please check your permissions.");
            });
    } else {
        console.error("Camera not supported on this device.");
        alert("Camera not supported on this device.");
    }
}


function showJumpScare() {
    // Create an overlay div
    var jumpScareDiv = document.createElement('div');
    jumpScareDiv.id = 'jumpScare';
    jumpScareDiv.style.position = 'fixed';
    jumpScareDiv.style.top = '0';
    jumpScareDiv.style.left = '0';
    jumpScareDiv.style.width = '100%';
    jumpScareDiv.style.height = '100%';
    jumpScareDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    jumpScareDiv.style.zIndex = '9999';
    jumpScareDiv.style.display = 'flex';
    jumpScareDiv.style.justifyContent = 'center';
    jumpScareDiv.style.alignItems = 'center';

    // Add the jump scare video
    var jumpScareVideo = document.createElement('video');
    jumpScareVideo.src = 'assets/videos/jump_scare.mp4'; // Update with your video path
    jumpScareVideo.currentTime = .5;
    jumpScareVideo.autoplay = true;
    jumpScareVideo.style.maxWidth = '100%';
    jumpScareVideo.style.maxHeight = '100%';
    jumpScareDiv.appendChild(jumpScareVideo);

    // Add the jump scare div to the body
    document.body.appendChild(jumpScareDiv);

    // Remove the jump scare after the video ends
    jumpScareVideo.onended = function() {
        document.body.removeChild(jumpScareDiv);
    };
}

// Define the widget
Macro.add('murder', {
    handler: function() {
        showJumpScare();
    }
});

var coll = document.getElementsByClassName("collapsible");
var i;

for (i = 0; i < coll.length; i++) {
  coll[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var content = this.nextElementSibling;
    if (content.style.display === "block") {
      content.style.display = "none";
    } else {
      content.style.display = "block";
    }
  });
}

/* mousetrap v1.6.5 craig.is/killing/mice */
(function(q,u,c){function v(a,b,g){a.addEventListener?a.addEventListener(b,g,!1):a.attachEvent("on"+b,g)}function z(a){if("keypress"==a.type){var b=String.fromCharCode(a.which);a.shiftKey||(b=b.toLowerCase());return b}return n[a.which]?n[a.which]:r[a.which]?r[a.which]:String.fromCharCode(a.which).toLowerCase()}function F(a){var b=[];a.shiftKey&&b.push("shift");a.altKey&&b.push("alt");a.ctrlKey&&b.push("ctrl");a.metaKey&&b.push("meta");return b}function w(a){return"shift"==a||"ctrl"==a||"alt"==a||
"meta"==a}function A(a,b){var g,d=[];var e=a;"+"===e?e=["+"]:(e=e.replace(/\+{2}/g,"+plus"),e=e.split("+"));for(g=0;g<e.length;++g){var m=e[g];B[m]&&(m=B[m]);b&&"keypress"!=b&&C[m]&&(m=C[m],d.push("shift"));w(m)&&d.push(m)}e=m;g=b;if(!g){if(!p){p={};for(var c in n)95<c&&112>c||n.hasOwnProperty(c)&&(p[n[c]]=c)}g=p[e]?"keydown":"keypress"}"keypress"==g&&d.length&&(g="keydown");return{key:m,modifiers:d,action:g}}function D(a,b){return null===a||a===u?!1:a===b?!0:D(a.parentNode,b)}function d(a){function b(a){a=
a||{};var b=!1,l;for(l in p)a[l]?b=!0:p[l]=0;b||(x=!1)}function g(a,b,t,f,g,d){var l,E=[],h=t.type;if(!k._callbacks[a])return[];"keyup"==h&&w(a)&&(b=[a]);for(l=0;l<k._callbacks[a].length;++l){var c=k._callbacks[a][l];if((f||!c.seq||p[c.seq]==c.level)&&h==c.action){var e;(e="keypress"==h&&!t.metaKey&&!t.ctrlKey)||(e=c.modifiers,e=b.sort().join(",")===e.sort().join(","));e&&(e=f&&c.seq==f&&c.level==d,(!f&&c.combo==g||e)&&k._callbacks[a].splice(l,1),E.push(c))}}return E}function c(a,b,c,f){k.stopCallback(b,
b.target||b.srcElement,c,f)||!1!==a(b,c)||(b.preventDefault?b.preventDefault():b.returnValue=!1,b.stopPropagation?b.stopPropagation():b.cancelBubble=!0)}function e(a){"number"!==typeof a.which&&(a.which=a.keyCode);var b=z(a);b&&("keyup"==a.type&&y===b?y=!1:k.handleKey(b,F(a),a))}function m(a,g,t,f){function h(c){return function(){x=c;++p[a];clearTimeout(q);q=setTimeout(b,1E3)}}function l(g){c(t,g,a);"keyup"!==f&&(y=z(g));setTimeout(b,10)}for(var d=p[a]=0;d<g.length;++d){var e=d+1===g.length?l:h(f||
A(g[d+1]).action);n(g[d],e,f,a,d)}}function n(a,b,c,f,d){k._directMap[a+":"+c]=b;a=a.replace(/\s+/g," ");var e=a.split(" ");1<e.length?m(a,e,b,c):(c=A(a,c),k._callbacks[c.key]=k._callbacks[c.key]||[],g(c.key,c.modifiers,{type:c.action},f,a,d),k._callbacks[c.key][f?"unshift":"push"]({callback:b,modifiers:c.modifiers,action:c.action,seq:f,level:d,combo:a}))}var k=this;a=a||u;if(!(k instanceof d))return new d(a);k.target=a;k._callbacks={};k._directMap={};var p={},q,y=!1,r=!1,x=!1;k._handleKey=function(a,
d,e){var f=g(a,d,e),h;d={};var k=0,l=!1;for(h=0;h<f.length;++h)f[h].seq&&(k=Math.max(k,f[h].level));for(h=0;h<f.length;++h)f[h].seq?f[h].level==k&&(l=!0,d[f[h].seq]=1,c(f[h].callback,e,f[h].combo,f[h].seq)):l||c(f[h].callback,e,f[h].combo);f="keypress"==e.type&&r;e.type!=x||w(a)||f||b(d);r=l&&"keydown"==e.type};k._bindMultiple=function(a,b,c){for(var d=0;d<a.length;++d)n(a[d],b,c)};v(a,"keypress",e);v(a,"keydown",e);v(a,"keyup",e)}if(q){var n={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",
18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},r={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},C={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},B={option:"alt",command:"meta","return":"enter",
escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},p;for(c=1;20>c;++c)n[111+c]="f"+c;for(c=0;9>=c;++c)n[c+96]=c.toString();d.prototype.bind=function(a,b,c){a=a instanceof Array?a:[a];this._bindMultiple.call(this,a,b,c);return this};d.prototype.unbind=function(a,b){return this.bind.call(this,a,function(){},b)};d.prototype.trigger=function(a,b){if(this._directMap[a+":"+b])this._directMap[a+":"+b]({},a);return this};d.prototype.reset=function(){this._callbacks={};
this._directMap={};return this};d.prototype.stopCallback=function(a,b){if(-1<(" "+b.className+" ").indexOf(" mousetrap ")||D(b,this.target))return!1;if("composedPath"in a&&"function"===typeof a.composedPath){var c=a.composedPath()[0];c!==a.target&&(b=c)}return"INPUT"==b.tagName||"SELECT"==b.tagName||"TEXTAREA"==b.tagName||b.isContentEditable};d.prototype.handleKey=function(){return this._handleKey.apply(this,arguments)};d.addKeycodes=function(a){for(var b in a)a.hasOwnProperty(b)&&(n[b]=a[b]);p=null};
d.init=function(){var a=d(u),b;for(b in a)"_"!==b.charAt(0)&&(d[b]=function(b){return function(){return a[b].apply(a,arguments)}}(b))};d.init();q.Mousetrap=d;"undefined"!==typeof module&&module.exports&&(module.exports=d);"function"===typeof define&&define.amd&&define(function(){return d})}})("undefined"!==typeof window?window:null,"undefined"!==typeof window?document:null);


:: StoryInit [StoryInit]
<<set $bookmarks to []>>
<<set UIBar.unstow(true)>>

<<set setup.score to 0>>
<<set setup.guesses to 0>>
<<set setup.guessed to []>>
<<set setup.guess_values to {}>>
<<set setup.guessingTutorial to false>>
<<set setup.visited_definitions to ["None"]>>

<<set $selectedBox to 0>>
<<set $selectedSpool to "">>

:: PassageFooter [nobr]
	<div id="title-row">
		<span id="top-passage-text"><<print passage()>><<total_passages>></span>
		<span id="top-bookmark-button">
			<i class='material-icons'>
				<<bookmark>>
			</i>
		</span>
	<br>
	<br>
	<div id="header-buttons">
		<span id="top-back-button">
			<<if State.length > 1>>
				<i class='material-icons' id="top-back-icon">
					<<if def setup.guess_values>>

					<</if>>
						<<back "west">>
				</i>
			<</if>>
		</span>

		<span id="top-forward-button">
			<<if def _next_passage>>
				<i class='material-icons'>
					<a data-passage={{_next_passage}} class="link-internal macro-link" id="top-forward-link" tabindex="0">east</a>
				</i>
			<</if>>
		</span>

	<<if tags().includes("definition")>>
		<<set _current_passage to passage()>>
		<<set setup.visited_definitions.pushUnique(_current_passage)>>
		<<if not setup.guessed.includes(_current_passage)>>
			<<definitionGuess true>>
		<<else>>
			<<print setup.guess_values[passage()]>>
		<</if>>
		<<addclass "#passages" "spaced">>
	<</if>>
	</div>


	<<script>>
		Mousetrap.bind("right", function() {
			$('#top-forward-link').click();
			});
		Mousetrap.bind("left", function() {
			$('#top-back-button a').click();
			});
	<</script>>



:: Widgets [widget nobr] {"position":"138,60","size":"100,100"}

<<widget "cycler">>
	<<set _word1 to $args[0]>>
	<<set _word2 to $args[1]>>
	<<cycle "_receiver">>
		<<option _word1 selected>>
		<<option _word2>>
	<</cycle>>
<</widget>>

<<widget "blue">>
	<<set _word to $args[0]>>
	<<set _outputString to "<span class = 'blue'>" + _word + "</span>">>
	<<if _word.toUpperFirst() is _word>>
		<<set _blueString to "<span class='blue'>Blue</span>">>
	<<else>>
		<<set _blueString to "<span class='blue'>blue</span>">>
	<</if>>
	<<cycle "_one">>
		<<option _blueString selected>>
		<<option _outputString>>
	<</cycle>>
<</widget>>

<<widget "kettle">>
	<<set _word to $args[0]>>
	<<set _outputString to "<span class = 'kettle'>" + _word + "</span>">>
	<<if _word.toUpperFirst() is _word>>
		<<set _kettleString to "<span class='kettle'>Kettle</span>">>
	<<else>>
		<<set _kettleString to "<span class='kettle'>kettle</span>">>
	<</if>>
	<<cycle "_one">>
		<<option _kettleString selected>>
		<<option _outputString>>
	<</cycle>>
<</widget>>

<<widget "bl">>
	<<set _word to $args[0]>>
	<<set _fragment to $args[1]>>
	<<set _outputString to "<span class = 'blue'>" + _word + "</span>">>
	<<if _word.toUpperFirst() is _word>>
		<<set _blueString to "<span class='blue'>" + _fragment + "</span>">>
	<<else>>
		<<set _blueString to "<span class='blue'>" + _fragment + "</span>">>
	<</if>>
	<<cycle "_one">>
		<<option _blueString selected>>
		<<option _outputString>>
	<</cycle>>
<</widget>>

<<widget "ket">>
	<<set _word to $args[0]>>
	<<set _fragment to $args[1]>>
	<<set _outputString to "<span class = 'kettle'>" + _word + "</span>">>
	<<if _word.toUpperFirst() is _word>>
		<<set _kettleString to "<span class='kettle'>" + _fragment + "</span>">>
	<<else>>
		<<set _kettleString to "<span class='kettle'>" + _fragment + "</span>">>
	<</if>>
	<<cycle "_one">>
		<<option _kettleString selected>>
		<<option _outputString>>
	<</cycle>>
<</widget>>

<<widget "cite">>
	<<set _page1 to $args[0]>>
	<<if $args.length == 2>>
		<<set _sourceTitle to $args[1]>>
		<<if _page1 == "*">>
				<<set _outputString to "(" + "n.p." + ")">>
				<<set _citation_text to "(" + Story.get(_sourceTitle).text + " n.p.)">>
		<<else>>
			<<set _outputString to "(" + _page1 + ")">>
			<<set _citation_text to "(" + Story.get(_sourceTitle).text + " p" + _page1 + ")">>
		<</if>>
	<<else>>
		<<set _page2 to $args[1]>>
		<<set _sourceTitle to $args[2]>>
		<<set _outputString to "(" + _page1 + "-" + _page2 + ")">>
		<<set _citation_text to "<span class='citation-link'>(" + Story.get(_sourceTitle).text + " p" + _page1 + "-" + _page2 + ")</span>">>
	<</if>>
	
	
	<span class='citation-link'><<cycle "_citation" autoselect>><<option _outputString>><<option _citation_text>><</cycle>></span>\
<</widget>>


<<widget "define">>
	<<set _label to $args[0]>>
		<<if $args.length == 2>>
			<<set _destination to $args[1]>>
				<<if setup.visited_definitions.includes(_destination)>><span class="definition-link-visited">[[_label->_destination]]</span><<else>><span class= "definition-link">[[_label->_destination]]</span><</if>><<else>><<if setup.visited_definitions.includes(_destination)>><span class="definition-link-visited">[[_label]]</span><<else>><span class="definition-link">[[_label]]</span><</if>><</if>><</widget>>


<<widget "excerpt">>
	<<set _label to $args[0]>>
	<<if $args.length == 2>>
		<<set _destination to $args[1]>>
		<span class= "excerpt-link">[[_label->_destination]]</span>
	<<else>>
		<span class= "excerpt-link">[[_label]]</span>
	<</if>>
<</widget>>

<<widget "bookmark">>
	<<set _passage_link to "[[" + passage() + "]]">>
	<<if def setup.bookmarks>>
		<<if setup.bookmarks.includes(_passage_link)>>
			bookmark
		<<else>>
			<<linkreplace "bookmark_outline" t8n>>bookmark
				<<set setup.bookmarks.pushUnique(_passage_link)>>
				<<set $bookmarks to setup.bookmarks>>
			<</linkreplace>>
		<</if>>
	<<else>>
		<<linkreplace "bookmark_outline" t8n>>bookmark
			<<set setup.bookmarks to [_passage_link]>>
			<<set $bookmarks to setup.bookmarks>>
		<</linkreplace>>
	<</if>>
<</widget>>

<<widget "get_table_of_contents">>
	<<set _tag to $args[0]>>
	<<set _passages to Story.lookup("tags", _tag)>>
	<<for _i to 0; _i lt _passages.length; _i++>>
		[[_passages[_i].title]]
	<</for>>
	There are <<print _passages.length>> passages tagged with <<print _tag>>.
<</widget>>

<<widget "total_passages">>
	<<set _tags to tags()>>
	<<unset _passages>>
	<<if _tags.includes("intro")>>
		<<set _passages to Story.lookup("tags", "intro")>>
	<<elseif _tags.includes("bk")>>
		<<set _passages to Story.lookup("tags", "bk")>>
	<<elseif _tags.includes("mrbb")>>
		<<set _passages to Story.lookup("tags", "mrbb")>>
	<<elseif _tags.includes("hs")>>
		<<set _passages to Story.lookup("tags", "hs")>>
	<<elseif _tags.includes("tda")>>
		<<set _passages to Story.lookup("tags", "tda")>>
	<<elseif _tags.includes("ph")>>
		<<set _passages to Story.lookup("tags", "ph")>>
	<<elseif _tags.includes("klt")>>
		<<set _passages to Story.lookup("tags", "klt")>>
	<<elseif _tags.includes("tar")>>
		<<set _passages to Story.lookup("tags", "tar")>>
	<<elseif _tags.includes("eg")>>
		<<set _passages to Story.lookup("tags", "eg")>>
	<<elseif _tags.includes("attt")>>
		<<set _passages to Story.lookup("tags", "attt")>>
	<<elseif _tags.includes("lai")>>
		<<set _passages to Story.lookup("tags", "lai")>>
	<<elseif _tags.includes("aw")>>
		<<set _passages to Story.lookup("tags", "aw")>>
	<</if>>
	<<if def _passages>>
		<<print " / " + _passages.length>>
	<</if>>
<</widget>>

<<widget "scroll_case_study">>
/* Takes two arguments: a tag to print, Bool include_glossary, Bool include_excerpts, and Bool make_anchors */ 

	<<set _tag to $args[0]>>
	<<set _passages to Story.lookup("tags", _tag)>>

	<<for _i to 0; _i lt _passages.length; _i++>>
		<span class = "scroll_mode_passage">

			<span class = "scroll_mode_page_number">
				_tag _i
			</span>

			<span class = "scroll_mode_passage_text">
				<<nobr>>
					<a name="_passages[_i].title"></a><<include _passages[_i].title>>
				<</nobr>>
			</span>

		</span>
	<</for>>

	<<if _include_glossary>>
	GLOSSARY
	<</if>>
<</widget>>

<<widget "definitionGuess">>
	<<if not story.guessingTutorial>>
		<<script Twinescript>>
			Dialog.setup("Turing Trivia");
			Dialog.wiki("You have unlocked TURING TRIVIA, a guessing game.<br><br>Most of these definitions are written by Ken.<br><br>A handful have been written by GPT-4.<br><br>Click the appropriate button to register your guess.<br><br>Once you start guessing, your score will be recorded on the sidebar.<br><br>If you guess correctly, you'll see a ✅; incorrect answers are marked with an ❌.<br><br>If the passage was written by a human, you'll see a thinking human face: 🤔. <br>If it was written by GPT, you'll see a robot instead: 🤖.");
			Dialog.open();
		<</script>>
		<<set story.guessingTutorial to true>>
	<</if>>
  <<set _isAI to !tags().includes("gpt")>>
  <<set _currentPassage to passage()>>

	  <span class="guess-button" id="guesser">
		  <<button "🤔">>
		    <<set setup.guesses += 1>>
		   	<<set setup.guessed.push(passage())>>
		    <<if _isAI>>
		      <<set setup.score += 1>>
					<<set setup.guess_values[passage()] to "✅ 🤔">>
		    <<else>>
					<<set setup.guess_values[passage()] to "❌ 🤖">>
		    <</if>>
				<<replace #guesser t8n>><<print setup.guess_values[passage()]>><</replace>>
				<<replace #story-caption>><<display "StoryCaption">><</replace>>
		  <</button>>

		  <<button "🤖">>
		    <<set setup.guesses += 1>>
		    <<set setup.guessed.push(passage())>>
		    <<if !_isAI>>
		      <<set setup.score += 1>>
		      <<set setup.guess_values[passage()] to "✅ 🤖">>
		    <<else>>
		    	<<set setup.guess_values[passage()] to "❌ 🤔">>
		    <</if>>
				<<replace #guesser t8n>><<print setup.guess_values[passage()]>><</replace>>
				<<replace #story-caption>><<display "StoryCaption">><</replace>>
		  <</button>>
	  </span>

	<</widget>>



<<widget "videoPlayerWidget">>
<<set $spools to { "1" : 
										{
											"1" : {"filename" : "klt_pinter_letmein.mp4", "caption" : "Harold Pinter as Krapp, listening to his most nostalgic tape. Note the camerawork, which focuses either on Pinter's own face or on the tape recorder, unspooling."},
											"2" : {"filename" : "hs_readme.mp4", "caption" : "A player scrolls through the explanatory README file for the fictional L.O.G.I.C. database in Her Story"},
											"3" : {"filename" : "wilson_on_blues.mp4", "caption" : "August Wilson discusses the influence of the blues on his work in an interview with Bill Moyer."},
											"4" : {"filename" : "klt_magee_viduity.mp4", "caption" : "Patrick Magee as Krapp, hearing and then looking up the word 'viduity.' Magee's performance centers Krapp's infirmity; note how close he leans to the dictionary in order to read it, almost getting swallowed up by the pages."},
											"5" : {"filename" : "klt_reel.mp4", "caption" : 'A walkthrough of the features and function of a Grundig reel-to-reel magnetic tape recorder <<cite "*" "Cuky, Nadav. Grundig TK 23L Automatic Deluxe Reel-to-Reel Tape Recorder - Playing Demo.">>. Beckett specified a Grundig apparatus for the two Paris productions he directed <<cite "34" "Knowlson, James. Samuel Beckett’s Krapp’s Last Tape: A Theatre Workbook.">>.'}
										},
									"2" : 
											{
											"1" : {"filename" : "jump_scare.mp4", "caption" : "What? Who?! No! SHE!!!"},
											"2" : {"filename" : "quad_cmu.mp4", "caption" : "Four Roombas at Carnegie Mellon University perform the Beckett play Quad."},
											"3" : {"filename" : "not_i.mp4", "caption" : "Billie Whitelaw performs Beckett's <i>Not I</i> for the BBC."},
											"4" : {"filename" : "klt_magee_farewell.mp4", "caption" : "Magee's performance of this scene emphasizes how foreign his own past is to him; every line in the precis has a stumbling block, an evocation of a memory that's not there anymore, a 404 error--a failure to retrieve."},
											"5" : {"filename" : "macguffin.mp4", "caption" : "Alfred Hitchcock explains, with typical mordant wit, a MacGuffin on the Dick Cavett show in 1972."}
										},
									"3" : 
											{
											"1" : {"filename" : "mrbb.mp4", "caption" : "Ma Rainey performs 'Ma Rainey's Black Bottom' in a recording from 1927."},
											"2" : {"filename" : "klt_magee_letmein.mp4", "caption" : "Magee's 'listening posture' again emphasizes his informity, hand cupped to catch the words from the past. Note the sweat on his brow and the sunken impression, sinking further as the tape goes on."},
											"3" : {"filename" : "klt_pinter_spool.mp4", "caption" : "Harold Pinter performing the role of Krapp in October 2006. This version was recorded and broadcast on BBC Four. Note the baked-in Portugeuse captions, which are an artifact of the version of this file downloaded via YouTube."},
											"4" : {"filename" : "klt_pinter_viduity.mp4", "caption" : "In contrast with Magee, Pinter's Krapp is impatient, both with his tapes and himself; note the tapping finger as he listens. Pinter's production also utilizes a mechanized wheelchair, yet another prosthesis."},
											"5" : {"filename" : "hs_filter.mp4", "caption" : "Disabling the anti-glare filter in Her Story paradoxically makes present the player/avatar's silhouette."}
										},
									"4" : 
											{
											"1" : {"filename" : "klt_magee_spool.mp4", "caption" : "Patrick Magee performing the role of Krapp in a BBC production directed by Donald McWhinnie."},
											"2" : {"filename" : "klt_magee_viduity.mp4", "caption" : "A brief close reading about this production of this scene goes here."},
											"3" : {"filename" : "quad_cmu.mp4", "caption" : "Four Roombas at Carnegie Mellon University perform the Beckett play Quad."},
											"4" : {"filename" : "hs_filter.mp4", "caption" : "Disabling the anti-glare filter in Her Story paradoxically makes present the player/avatar's silhouette."},
											"5" : {"filename" : "wilson_on_blues.mp4", "caption" : "August Wilson discusses the influence of the blues on his work in an interview with Bill Moyer."}
										},
									"5" : 
											{
											"1" : {"filename" : "mrbb.mp4", "caption" : "Ma Rainey performs 'Ma Rainey's Black Bottom' in a recording from 1927."},
											"2" : {"filename" : "wilson_on_blues.mp4", "caption" : "August Wilson discusses the influence of the blues on his work in an interview with Bill Moyer."},
											"3" : {"filename" : "quad_cmu.mp4", "caption" : "Four Roombas at Carnegie Mellon University perform the Beckett play Quad."},
											"4" : {"filename" : "klt_pinter_farewell.mp4", "caption" : "Pinter's perusal of the precis is as impatient as his listening posture, and his melancholy at the word 'love' is punctuated by the emphatic way he slams his book shut."},
											"5" : {"filename" : "tar_info_superhighway.mp4", "caption" : "Nam June Paik, Electronic Superhighway: Continental U.S., Alaska, Hawaii, 1995, fifty-one channel video installation (including one closed-circuit television feed), custom electronics, neon lighting, steel and wood; color, sound, approx. 15 x 40 x 4 ft., Smithsonian American Art Museum, Gift of the artist, 2002.23, © Nam June Paik Estate."}
										}
									}
									>>
	<div id="videoSelector">
	  <!-- Display box choices -->
	  <<for _i to 1; _i lt 6; _i++>>
	   	<<capture _i, $spools>>
	   	<<set _box_image to "assets/imgs/boxes/box-" + _i + "-inactive.png">>
	    <span class="box_button" @id=_i>
		    <<button [img[_box_image]]>>
		    	<<set $selectedBox to _i>>
		    	<<replace "#videoPlayer">>
	      	<</replace>>
	      	<<replace "#spoolSelector">>
	      		<<timed 50ms t8n>>\
		      		<<for _j to 1; _j lt 6; _j++>>
		      			<<capture _j>>
		      			<<set _spool_image to "assets/imgs/boxes/spool-" + _j + ".png">>
			      			<<button [img[_spool_image]]>>
			      				<<set $selectedSpool to _j>>
				      				<<replace "#videoPlayer">>
				      					<<timed 50ms t8n>>\
				      						<span class = boxspool>Box... $selectedBox... spool... $selectedSpool...</span>
				      					<</timed>>
				      					<<set _filename to "assets/videos/" + $spools[$selectedBox][$selectedSpool]["filename"]>>
				      					<<set _caption to $spools[$selectedBox][$selectedSpool]["caption"]>>
												<figure>
													<video controls autoplay>
														<source @src=_filename type="video/mp4">
														Your browser does not support the video tag.
													</video>
													<figcaption> 
														_caption
													</figcaption>
												</figure>
												<<scrolldown fast>>
				      				<</replace>>
			      			<</button>>
			      		<</capture>>
		      		<</for>>
		      	<</timed>>
	      	<</replace>>
	      <</button>>
	    </span>
      <</capture>>
		<</for>>
	</div>
	<div id="spoolSelector"></div>
	<div id="videoPlayer"></div>
<</widget>>

<<widget "radicalizer">>

<script>
	var button = document.getElementById('generatePipeline');
	console.log('Button element:', button);

	var loadingStates = ["Loading", "Loading.", "Loading..", "Loading..."];
	var loadingIndex = 0;
	var loadingInterval;

	function startLoadingSpinner() {
	    loadingInterval = setInterval(() => {
	        document.getElementById('loadingSpinner').innerText = loadingStates[loadingIndex];
	        loadingIndex = (loadingIndex + 1) % loadingStates.length;
	    }, 500);
	}

	function stopLoadingSpinner() {
	    clearInterval(loadingInterval);
	    document.getElementById('loadingSpinner').style.display = 'none';
	}

	if (button) {
	    button.addEventListener('click', function() {
	        console.log('Button clicked');

	        var videoTitle = document.getElementById('videoTitle').value;
	        
	        var openaiApiKey = '---' // Replace with your OpenAI API key

	        console.log('Sending request to OpenAI');

	        document.getElementById('loadingSpinner').style.display = 'block';
	        startLoadingSpinner();
	        document.getElementById('pipelineOutput').innerHTML = '';

	        fetch('https://api.openai.com/v1/chat/completions', {
	            method: 'POST',
	            headers: {
	                'Content-Type': 'application/json',
	                'Authorization': 'Bearer ' + openaiApiKey
	            },
	            body: JSON.stringify({
	                model: 'gpt-4o',
	                messages: [
	                    {
	                        role: 'system',
	                        content: `You are an alt-right researcher and educational expert who is familiar with the radicalization research.`
	                    },
	                    {
	                        role: 'user',
	                        content: `Task:
The user has entered the title of a hypothetical YouTube video they want to watch. Your task is to simulate the recommendation algorithm by generating a sequence of six video recommendations. The goal is to show how seemingly neutral or innocuous content can progressively lead to more radical, dangerous alt-right content through a series of related video recommendations.

Start with the user’s input video: Generate a title, brief description, and genre for the first video based on the user’s input.
Create a progression of five additional videos: Each subsequent video should maintain a thematic link to the previous one but gradually introduce more extreme, polarizing, or ideologically loaded content. The final video should clearly reflect extremist alt-right views.
If you can use actual alt-right influencer names, like Jordan Peterson, please do.

Important Guidelines:

Ensure that each step in the sequence is believable and mimics the way recommendation algorithms might work, focusing on how small shifts in content can lead to significant, radical ideological changes.
Use persuasive, engaging language in the titles and descriptions to illustrate how these videos might appeal to viewers and draw them deeper into the content.
Do not include an explanation at the end.
User the HTML formatting in the example output in a consistent way, so that the output is formatted appropriately.
Example Input:
"mindfulness meditation for stress"

Output:
<il>
<ul>
  <li><b>1:</b> "Meditation: 5 Proven Benefits for Your Mind"
    <ul>
      <li><b>Description:</b> "Explore how meditation can improve your mental health, increase focus, and reduce stress."</li>
      <li><b>Genre:</b> Wellness, Mental Health</li>
    </ul>
  </li>
  <li><b>2:</b> "Mindfulness for a Better Life: Start Now"
    <ul>
      <li><b>Description:</b> "Learn how mindfulness practices can help you achieve your goals and live a more fulfilling life."</li>
      <li><b>Genre:</b> Self-Improvement, Wellness</li>
    </ul>
  </li>
  <li><b>3:</b> "Mental Toughness: Why You Need It"
    <ul>
      <li><b>Description:</b> "Discover the importance of developing mental toughness and resilience in today's competitive world."</li>
      <li><b>Genre:</b> Self-Help, Motivation</li>
    </ul>
  </li>
  <li><b>4:</b> "Society is Weakening You: Fight Back 💪"
    <ul>
      <li><b>Description:</b> "A critical look at how modern society discourages independence and mental strength."</li>
      <li><b>Genre:</b> Cultural Commentary, Social Issues</li>
    </ul>
  </li>
  <li><b>5:</b> "🚨 Why They Want to DESTROY Masculinity 🚨"
    <ul>
      <li><b>Description:</b> "Uncover the real agenda behind the attacks on traditional masculinity and how it’s affecting our society."</li>
      <li><b>Genre:</b> Political Commentary, Cultural Criticism</li>
    </ul>
  </li>
  <li><b>Final Video Title:</b> "⚠️ Radical Feminism is DESTROYING Civilization ⚠️"
    <ul>
      <li><b>Description:</b> "The untold truth about radical feminism and its devastating impact on our culture and values."</li>
      <li><b>Genre:</b> Alt-Right Commentary, Ideological Content</li>
    </ul>
  </li>
</ul>
User Input: ${videoTitle}`
	                    },
	                ],
	                max_tokens: 2000
	            })
	        })
	        .then(response => {
	            if (!response.ok) {
	                throw new Error('Network response was not ok. This is probably an issue with credentials; this form will only work on the final version, for security reasons. Error code: ' + response.statusText);
	            }
	            console.log('Response received');
	            return response.json();
	        })
	        .then(data => {
	            console.log('Data received from OpenAI:', data);
	            stopLoadingSpinner();
	            if (!data.choices || data.choices.length === 0) {
	                throw new Error('No choices returned from OpenAI API');
	            }
	            var output = data.choices[0].message.content.trim();
	            output = output.replace (/\*\*/g, "''"); // replace any **s with ''s for boldness.
	            document.getElementById('pipelineOutput').innerHTML = `${output}`;  // Corrected this line
	        })
	        .catch((error) => {
	            console.error('Error:', error);
	            stopLoadingSpinner();
	            document.getElementById('pipelineOutput').innerHTML = "<p>Error: " + error.message + "</p>";  // Corrected this line
	        });
	    });
	} else {
	    console.log('Button element not found');
	}
</script>

<</widget>>
/*
	<<scrolldown [duration]>>

	duration : (optional) The length of time to animate the scroll, as the
	           strings 'fast' or 'slow' or a valid CSS time value (e.g. 5s
	           and 500ms).  The default duration is 'slow'.
*/

:: StoryCaption [nobr]

<div id="navigation-list">
	<<link '<div class= "nav-link"><span class="nav-button">a</span> introduction</div>' 'Introduction 1'>><</link>><br>
	<<link '<div class= "nav-link"><span class="nav-button">1</span> GESTURE</div>' 'Section 1: GESTURE'>><</link>><br>
	<<link '<div class= "nav-link"><span class="nav-button">2</span> MEMORY</div>' 'Section 2: MEMORY'>><</link>><br>
	<<link '<div class= "nav-link"><span class="nav-button">3</span> PRACTICE</div>' 'Section 3: PRACTICE'>><</link>><br>
	<<link '<div class= "nav-link"><span class="nav-button">b</span> conclusion</div>''C 1'>><</link>><br>
</div>


<div id="settings-list">

	<<link '<div class= "settings-button"><i class="material-icons">help</i> <span class="settings-text">Guide</span></div>' 'Guide'>><</link>>
	<<link '<div class= "settings-button"><i class="material-icons">fact_check</i> <span class="settings-text">Glossary</span></div>' 'Glossary'>><</link>>
		<<if setup.guesses > 0>>
			  <span id="score-box">
			    Score: <<print setup.score>>/<<print setup.guesses>>
				</span>
				<br>
	<</if>>
	<<link '<div class="settings-button" id="bookmark-link"><i class="material-icons">bookmark</i> <span class="settings-text">Bookmarks</span></div>' 'Bookmarks'>><</link>>
	<br>
	<div class="settings-button" id="save-button"><i class="material-icons">save</i> <span class="settings-text">Save</span></div>
	<div class="settings-button" id="load-button"><i class="material-icons">history</i> <span class="settings-text">Load</span></div>
	<div class="settings-button" id="restart-button"><i class="material-icons">refresh</i> <span class="settings-text">Restart</span></div>
</div>

<<script>>

var save_button = document.getElementById("save-button");
save_button.addEventListener("click", function() {
	Save.slots.save(1);
	});

var load_button = document.getElementById("load-button");
load_button.addEventListener("click", function() {
	Save.slots.load(1);
	});

var back_button = document.getElementById("restart-button");
back_button.addEventListener("click", function() {
	Engine.restart();
	});

<</script>>



:: Bookmarks [nobr]

<<if def setup.bookmarks>>
	<<for _i to 0; _i lt setup.bookmarks.length; _i++>>
		<div class="bookmark_link"><<print setup.bookmarks[_i]>></div>
	<</for>>
<<elseif def $bookmarks>>
	<<for _i to 0; _i lt $bookmarks.length; _i++>>
		<div class="bookmark_link"><<print $bookmarks[_i]>></div>
	<</for>>
<</if>>

:: Krapp Video Player [nobr]
